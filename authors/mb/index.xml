<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>mb on all about apps</title>
    <link>https://code.allaboutapps.at/authors/mb/</link>
    <description>Recent content in mb on all about apps</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 28 Mar 2019 11:00:00 +0200</lastBuildDate>
    
	<atom:link href="https://code.allaboutapps.at/authors/mb/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Reactive Swift: Progress HUD Extension and Order of Events</title>
      <link>https://code.allaboutapps.at/articles/reactive-swift-events-order/</link>
      <pubDate>Thu, 28 Mar 2019 11:00:00 +0200</pubDate>
      
      <guid>https://code.allaboutapps.at/articles/reactive-swift-events-order/</guid>
      <description>A blocking progress HUD to show a network or any other asynchronous activity may not be the most elegant solution, but sometimes it just gets the job done. Using ReactiveSwift you can use a SignalProducer extension to quickly show &amp;amp; hide a HUD for any reactive operation:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  extension SignalProducer { public func bindToProgressHUD(_ viewDelay: Double = 0.</description>
    </item>
    
    <item>
      <title>Cocoaheads @ all about apps</title>
      <link>https://code.allaboutapps.at/articles/cocoaheads/</link>
      <pubDate>Tue, 26 Feb 2019 11:30:08 +0100</pubDate>
      
      <guid>https://code.allaboutapps.at/articles/cocoaheads/</guid>
      <description>Last Thursday we hosted the 109th edition of Cocoaheads Austria in our office and more than 30 local iOS and Mac developers showed up. Cocoaheads is a monthly meetup and always hosted at a different location, usually by local development companies here in Vienna.
Michael Heinzl and myself, Matthias Buchetics, gave the main talk about App Architecture at all about apps before Peter Steinberger talked about Swizzling. Our own Gunter Hager then closed with a fun presentation of Emoji Flags before we had some great conversations with food &amp;amp; drinks.</description>
    </item>
    
    <item>
      <title>Drawing Smooth 2D Graphs using UIBezierPath</title>
      <link>https://code.allaboutapps.at/articles/smooth-graph-lines/</link>
      <pubDate>Mon, 26 Nov 2018 21:12:27 +0100</pubDate>
      
      <guid>https://code.allaboutapps.at/articles/smooth-graph-lines/</guid>
      <description>We have been working on multiple projects that required drawing 2D line graphs given a set of points. UIKit gives us the versatile UIBezierPath, which allows us to create a straight line graph by appending segments using addLineToPath for each point in our array. Easy, but not really pretty.
There are two different kinds of curves in UIBezierPath: quadratic curves with a single control point (addQuadCurveToPoint) and cubic curves with two control points (addCurveToPoint).</description>
    </item>
    
    <item>
      <title>Reactive Swift: Access Control for Mutable Properties</title>
      <link>https://code.allaboutapps.at/articles/reactive-swift-properties/</link>
      <pubDate>Tue, 17 Jul 2018 11:50:28 +0200</pubDate>
      
      <guid>https://code.allaboutapps.at/articles/reactive-swift-properties/</guid>
      <description>Swift&amp;rsquo;s access control allows us to define separate access levels for the getter and setter of a property. This is nice if we want to provide read access to a property but should only be able to modify it internally:
private(set) var isLoading = false When using ReactiveSwift (or similarly RxSwift) you usually work with MutableProperty. In order to limit modification of the property&amp;rsquo;s value we can create a private writable MutableProperty and a public read-only Property:</description>
    </item>
    
    <item>
      <title>Reactive Swift: flatMap, flatten and combineLatest</title>
      <link>https://code.allaboutapps.at/articles/reactive-swift-flatmap/</link>
      <pubDate>Tue, 17 Jul 2018 11:50:28 +0200</pubDate>
      
      <guid>https://code.allaboutapps.at/articles/reactive-swift-flatmap/</guid>
      <description>Most of our projects at all about apps are build using a MVVM architecture with ReactiveSwift as our reactive framework of choice. However, all code examples should be easily translatable to RxSwift.
Often, you end up with an array of objects (e.g. View Models) which contain some reactive property that you want to bind to. The array itself is a MutableProperty as well and can change at any time (e.g. after a network request).</description>
    </item>
    
  </channel>
</rss>