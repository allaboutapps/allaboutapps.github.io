<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ReactiveSwift on all about apps</title>
    <link>https://code.allaboutapps.at/categories/reactiveswift/</link>
    <description>Recent content in ReactiveSwift on all about apps</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 28 Mar 2019 11:00:00 +0200</lastBuildDate>
    
	<atom:link href="https://code.allaboutapps.at/categories/reactiveswift/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Reactive Swift: Progress HUD Extension and Order of Events</title>
      <link>https://code.allaboutapps.at/articles/reactive-swift-events-order/</link>
      <pubDate>Thu, 28 Mar 2019 11:00:00 +0200</pubDate>
      
      <guid>https://code.allaboutapps.at/articles/reactive-swift-events-order/</guid>
      <description>A blocking progress HUD to show a network or any other asynchronous activity may not be the most elegant solution, but sometimes it just gets the job done. Using ReactiveSwift you can use a SignalProducer extension to quickly show &amp;amp; hide a HUD for any reactive operation:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  extension SignalProducer { public func bindToProgressHUD(_ viewDelay: Double = 0.</description>
    </item>
    
    <item>
      <title>Reactive Swift: Access Control for Mutable Properties</title>
      <link>https://code.allaboutapps.at/articles/reactive-swift-properties/</link>
      <pubDate>Tue, 17 Jul 2018 11:50:28 +0200</pubDate>
      
      <guid>https://code.allaboutapps.at/articles/reactive-swift-properties/</guid>
      <description>Swift&#39;s access control allows us to define separate access levels for the getter and setter of a property. This is nice if we want to provide read access to a property but should only be able to modify it internally:
private(set) var isLoading = false When using ReactiveSwift (or similarly RxSwift) you usually work with MutableProperty. In order to limit modification of the property&#39;s value we can create a private writable MutableProperty and a public read-only Property:</description>
    </item>
    
    <item>
      <title>Reactive Swift: flatMap, flatten and combineLatest</title>
      <link>https://code.allaboutapps.at/articles/reactive-swift-flatmap/</link>
      <pubDate>Tue, 17 Jul 2018 11:50:28 +0200</pubDate>
      
      <guid>https://code.allaboutapps.at/articles/reactive-swift-flatmap/</guid>
      <description>Most of our projects at all about apps are build using a MVVM architecture with ReactiveSwift as our reactive framework of choice. However, all code examples should be easily translatable to RxSwift.
Often, you end up with an array of objects (e.g. View Models) which contain some reactive property that you want to bind to. The array itself is a MutableProperty as well and can change at any time (e.g. after a network request).</description>
    </item>
    
  </channel>
</rss>