<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Home on all about apps</title>
    <link>https://code.allaboutapps.at/</link>
    <description>Recent content in Home on all about apps</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 26 Feb 2019 11:30:08 +0100</lastBuildDate>
    
	<atom:link href="https://code.allaboutapps.at/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>About</title>
      <link>https://code.allaboutapps.at/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://code.allaboutapps.at/about/</guid>
      <description>All about apps is a market leader in the realisation of individual mobile solutions for industrial companies, financial service providers, commercial traders and medical organisations. We guide our partners from initial concepts right through to the end product.
Visit allaboutapps.at to learn more about us and our services.</description>
    </item>
    
    <item>
      <title>Cocoaheads @ all about apps</title>
      <link>https://code.allaboutapps.at/articles/cocoaheads/</link>
      <pubDate>Tue, 26 Feb 2019 11:30:08 +0100</pubDate>
      
      <guid>https://code.allaboutapps.at/articles/cocoaheads/</guid>
      <description>Last Thursday we hosted the 109th edition of Cocoaheads Austria in our office and more than 30 local iOS and Mac developers showed up. Cocoaheads is a monthly meetup and always hosted at a different location, usually by local development companies here in Vienna.
Michael Heinzl and myself, Matthias Buchetics, gave the main talk about App Architecture at all about apps before Peter Steinberger talked about Swizzling. Our own Gunter Hager then closed with a fun presentation of Emoji Flags before we had some great conversations with food &amp;amp; drinks.</description>
    </item>
    
    <item>
      <title>Advanced Pagination With Epoxy &amp; Datasources</title>
      <link>https://code.allaboutapps.at/articles/advanced-pagination-with-epoxy/</link>
      <pubDate>Thu, 14 Feb 2019 10:30:11 +0100</pubDate>
      
      <guid>https://code.allaboutapps.at/articles/advanced-pagination-with-epoxy/</guid>
      <description>Many developers still avoid using Epoxy. I even hesitated for a long time because of the boilerplate coming a long with epoxy and its models, but after reading this post at the latest, you may consider using epoxy, when paging is needed.
So in this post we gonna build pagination with the jetpackâ€˜s paging library, and epoxy, which has an own controller for paging.
We gonna use reddit as our api, by simply adding .</description>
    </item>
    
    <item>
      <title>Emoji Flags</title>
      <link>https://code.allaboutapps.at/articles/emoji-flags/</link>
      <pubDate>Wed, 23 Jan 2019 10:01:25 +0100</pubDate>
      
      <guid>https://code.allaboutapps.at/articles/emoji-flags/</guid>
      <description>Sometimes there&amp;rsquo;s the need to fly a flag in your project. You probably know the ISO code, more specifically the ISO 3166-1 alpha-2 code, a.k.a two-letter code. For Austria this would be AT. Now when thinking about converting these codes into emoji flags, a lookup table comes to mind. But instead of jumping straight into implementing the table it&amp;rsquo;s time to take a closer look at the Unicode Standard. The clever people that added the flag emojis to the Unicode character set invented a system of specifying the flags that makes an algorithmic conversion without lookup tables quite easy.</description>
    </item>
    
    <item>
      <title>Drawing Smooth 2D Graphs using UIBezierPath</title>
      <link>https://code.allaboutapps.at/articles/smooth-graph-lines/</link>
      <pubDate>Mon, 26 Nov 2018 21:12:27 +0100</pubDate>
      
      <guid>https://code.allaboutapps.at/articles/smooth-graph-lines/</guid>
      <description>We have been working on multiple projects that required drawing 2D line graphs given a set of points. UIKit gives us the versatile UIBezierPath, which allows us to create a straight line graph by appending segments using addLineToPath for each point in our array. Easy, but not really pretty.
There are two different kinds of curves in UIBezierPath: quadratic curves with a single control point (addQuadCurveToPoint) and cubic curves with two control points (addCurveToPoint).</description>
    </item>
    
    <item>
      <title>TimingLogger</title>
      <link>https://code.allaboutapps.at/articles/timing-logger/</link>
      <pubDate>Wed, 03 Oct 2018 16:02:48 +0200</pubDate>
      
      <guid>https://code.allaboutapps.at/articles/timing-logger/</guid>
      <description>TimingLogger Sometimes developers needs to analyze performance of a small friction of code. Maybe a RecyclerView is not scrolling smoothly or a calculation needs too much time, we have to split it up and try to find the line or block that runs inefficently. We all know to get a smooth user experience we only have 16ms for each frame to render. So it is very important to locate and optimize inefficient code.</description>
    </item>
    
    <item>
      <title>Android Template Project</title>
      <link>https://code.allaboutapps.at/articles/android-template-project/</link>
      <pubDate>Tue, 25 Sep 2018 16:01:48 +0200</pubDate>
      
      <guid>https://code.allaboutapps.at/articles/android-template-project/</guid>
      <description>Team Android Project Template As a software development company we are starting new projects every few weeks. With every project we create a jira ticket called Project Setup.
We walked through all our Project Setup Jira tickets and calculated the average hours for this kind of task: In average every android project needs about 3.5 hours for a simple setup. On the other hand the project setup is boring and no developer likes that work.</description>
    </item>
    
    <item>
      <title>Reactive Swift: Access Control for Mutable Properties</title>
      <link>https://code.allaboutapps.at/articles/reactive-swift-properties/</link>
      <pubDate>Tue, 17 Jul 2018 11:50:28 +0200</pubDate>
      
      <guid>https://code.allaboutapps.at/articles/reactive-swift-properties/</guid>
      <description>Swift&amp;rsquo;s access control allows us to define separate access levels for the getter and setter of a property. This is nice if we want to provide read access to a property but should only be able to modify it internally:
private(set) var isLoading = false When using ReactiveSwift (or similarly RxSwift) you usually work with MutableProperty. In order to limit modification of the property&amp;rsquo;s value we can create a private writable MutableProperty and a public read-only Property:</description>
    </item>
    
    <item>
      <title>Reactive Swift: flatMap, flatten and combineLatest</title>
      <link>https://code.allaboutapps.at/articles/reactive-swift-flatmap/</link>
      <pubDate>Tue, 17 Jul 2018 11:50:28 +0200</pubDate>
      
      <guid>https://code.allaboutapps.at/articles/reactive-swift-flatmap/</guid>
      <description>Most of our projects at all about apps are build using a MVVM architecture with ReactiveSwift as our reactive framework of choice. However, all code examples should be easily translatable to RxSwift.
Often, you end up with an array of objects (e.g. View Models) which contain some reactive property that you want to bind to. The array itself is a MutableProperty as well and can change at any time (e.g. after a network request).</description>
    </item>
    
  </channel>
</rss>