<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>All Articles on all about apps</title>
    <link>https://code.allaboutapps.at/articles/</link>
    <description>Recent content in All Articles on all about apps</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 03 Jul 2019 14:06:29 +0200</lastBuildDate>
    
	<atom:link href="https://code.allaboutapps.at/articles/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>UIKonf 2019</title>
      <link>https://code.allaboutapps.at/articles/uikonf2019/</link>
      <pubDate>Wed, 03 Jul 2019 14:06:29 +0200</pubDate>
      
      <guid>https://code.allaboutapps.at/articles/uikonf2019/</guid>
      <description>UIKonf 2019 took place from May 26th to 29th in Berlin and is one of the largest iOS conferences in Europe. For us at all about apps it was the forth visit in a row and, as always, it was an awesome conference.
While the talks don&amp;rsquo;t start until Monday, UIKonf always kicks off with a day of social events. These include a boat tour, guided tours through museums or the famous bike tour.</description>
    </item>
    
    <item>
      <title>Force Android in App Updates</title>
      <link>https://code.allaboutapps.at/articles/android-in-app-updates/</link>
      <pubDate>Fri, 21 Jun 2019 09:45:12 +0200</pubDate>
      
      <guid>https://code.allaboutapps.at/articles/android-in-app-updates/</guid>
      <description>&lt;p&gt;With the new &lt;a href=&#34;https://developer.android.com/guide/app-bundle/playcore#include_playcore&#34; target=&#34;_blank&#34;&gt;Play Core Library&lt;/a&gt; Google offers us the possibility to prompt for app updates from within our app for the first time. Users get informed about new available versions and can decide to update their app. If needed, we can even force the update altogether. The Google library itself handles the download and installation of the new app version.&lt;/p&gt;

&lt;p&gt;There are two modes how an update can be triggered:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Flexible&lt;/em&gt;: The app update runs in the background. The User can continue using the app and the update will be applied when the user chooses to restart the app.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Immediate&lt;/em&gt;: The user is forced to update the app and the app is unusable until the process is finished.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The downside is, that the library itself is not able to detect if an update should be flexible or immediate. Sometimes it might be necessary to force users to update right away due to some breaking changes or unwanted crashes.&lt;/p&gt;

&lt;p&gt;So we need to provide a way to decide between a flexible or immediate update. To simplify this process we published an Android library which allows us to decide on the type of update we need.&lt;/p&gt;

&lt;h5 id=&#34;who-decides-to-force-an-update&#34;&gt;Who decides to force an update?&lt;/h5&gt;

&lt;p&gt;The library offers an easy way to detect if an update should be forced. All we have to do is implement &lt;code&gt;ForceUpdateProvider&lt;/code&gt; and call &lt;code&gt;doUpdate()&lt;/code&gt; when we need to update right away.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DemoForceUpdateProvider&lt;/span&gt; : ForceUpdateProvider {

    &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;requestUpdateShouldBeImmediate&lt;/span&gt;(availableVersionCode: Int, doUpdate: () -&amp;gt; Unit) {
        &lt;span style=&#34;color:#75715e&#34;&gt;// place your logic here
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// obtain force update decision from your source eg Firebase Remote Config
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;// if a forced update is needed, just call doUpdate
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        doUpdate()
    }
}

inAppUpdateManager = InAppUpdateManager(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;, DemoForceUpdateProvider())&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There are a lot of possible sources to decide if an update should be forced. Examples are &lt;code&gt;Firebase Remote Config&lt;/code&gt;, &lt;code&gt;File hosted on your server&lt;/code&gt;, &lt;code&gt;Even/Odd available version code&lt;/code&gt;, &amp;hellip;&lt;/p&gt;

&lt;p&gt;Since the forced-update screen that shows when we use this method can be closed through the back button, we need to override &lt;code&gt;onActivityResult&lt;/code&gt; to keep showing the update again to achieve an actually blocking update mechanism.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onActivityResult&lt;/span&gt;(requestCode: Int, resultCode: Int, &lt;span style=&#34;color:#66d9ef&#34;&gt;data&lt;/span&gt;: Intent?) {
    inAppUpdateManager.onActivityResult(requestCode, resultCode)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;.onActivityResult(requestCode, resultCode, &lt;span style=&#34;color:#66d9ef&#34;&gt;data&lt;/span&gt;)
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That&amp;rsquo;s it. The end result looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://code.allaboutapps.at/images/in_app_update_optimized.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The library is available on GitHub: &lt;a href=&#34;https://github.com/allaboutapps/InAppUpdater&#34; target=&#34;_blank&#34;&gt;https://github.com/allaboutapps/InAppUpdater&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Nodejs June Meetup</title>
      <link>https://code.allaboutapps.at/articles/nodejs-june-meetup/</link>
      <pubDate>Wed, 19 Jun 2019 08:48:46 +0200</pubDate>
      
      <guid>https://code.allaboutapps.at/articles/nodejs-june-meetup/</guid>
      <description>On the 4th of June we hosted the NodeJS June Meetup in our CreatePlayground office, with 3 presentations and ongoing discussions about various topics.
The first talk with the title Private registry with Verdaccio was given by Juan Picado, follwed by a Lightning Talk about Fun with Time Zones by our Gottfried Chen. The last talk was held by Juho Vepsäläinen about JavaScript - Quo Vadis
Related questions and notes about the talks as well as conversations about other NodeJS related topics have been discussed afterwards and we are already looking forward to host the next one.</description>
    </item>
    
    <item>
      <title>iOS Coordinators</title>
      <link>https://code.allaboutapps.at/articles/ios-coordinator/</link>
      <pubDate>Tue, 14 May 2019 10:00:00 +0200</pubDate>
      
      <guid>https://code.allaboutapps.at/articles/ios-coordinator/</guid>
      <description>&lt;p&gt;In our apps, we use the &lt;a href=&#34;https://www.objc.io/issues/13-architecture/mvvm/&#34; target=&#34;_blank&#34;&gt;MVVM (Model-View-ViewModel)&lt;/a&gt; approach.
This concept manages the interaction within a view controller, but who manages the view controllers?&lt;/p&gt;

&lt;h1 id=&#34;the-coordinator&#34;&gt;The Coordinator!&lt;/h1&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Android Jetpack Navigation Pitfalls &amp; Tricks</title>
      <link>https://code.allaboutapps.at/articles/android-jetpack-navigation-pitfalls/</link>
      <pubDate>Tue, 07 May 2019 10:03:39 +0200</pubDate>
      
      <guid>https://code.allaboutapps.at/articles/android-jetpack-navigation-pitfalls/</guid>
      <description>Table of content  Send Args to fragments within activities Use startActivityForResult with the Navigation library Use generic naming for action names Reuse fragments in multiple navigation graphs TLDR Further readings  Navigation library from Jetpack offers a great variety of helpful tools, especially with the SafeArgs extension. My last project contained many different navigation flows paired with a large number of screens, so I decided to try the new navigation library which had just reached a stable release.</description>
    </item>
    
    <item>
      <title>Fun With Time Zones Part 1</title>
      <link>https://code.allaboutapps.at/articles/fun-with-time-zones-pt1/</link>
      <pubDate>Thu, 04 Apr 2019 14:36:09 +0200</pubDate>
      
      <guid>https://code.allaboutapps.at/articles/fun-with-time-zones-pt1/</guid>
      <description>In our daily jobs as programmers we tackle coding challenges and abstract them in algorithms and functions, happy when we find an elegant solutions to a tricky problem. We find comfort in dealing with easily understandable, deterministic and logical concepts.
Time is NOT one of them. And that’s a big problem. We are so used logical terms, that we try to apply our thinking to the concept of time as well.</description>
    </item>
    
    <item>
      <title>Reactive Swift: Progress HUD Extension and Order of Events</title>
      <link>https://code.allaboutapps.at/articles/reactive-swift-events-order/</link>
      <pubDate>Thu, 28 Mar 2019 11:00:00 +0200</pubDate>
      
      <guid>https://code.allaboutapps.at/articles/reactive-swift-events-order/</guid>
      <description>A blocking progress HUD to show a network or any other asynchronous activity may not be the most elegant solution, but sometimes it just gets the job done. Using ReactiveSwift you can use a SignalProducer extension to quickly show &amp;amp; hide a HUD for any reactive operation:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  extension SignalProducer { public func bindToProgressHUD(_ viewDelay: Double = 0.</description>
    </item>
    
    <item>
      <title>Cocoaheads @ all about apps</title>
      <link>https://code.allaboutapps.at/articles/cocoaheads/</link>
      <pubDate>Tue, 26 Feb 2019 11:30:08 +0100</pubDate>
      
      <guid>https://code.allaboutapps.at/articles/cocoaheads/</guid>
      <description>Last Thursday we hosted the 109th edition of Cocoaheads Austria in our office and more than 30 local iOS and Mac developers showed up. Cocoaheads is a monthly meetup and always hosted at a different location, usually by local development companies here in Vienna.
Michael Heinzl and myself, Matthias Buchetics, gave the main talk about App Architecture at all about apps before Peter Steinberger talked about Swizzling. Our own Gunter Hager then closed with a fun presentation of Emoji Flags before we had some great conversations with food &amp;amp; drinks.</description>
    </item>
    
    <item>
      <title>Advanced Pagination With Epoxy &amp; Datasources</title>
      <link>https://code.allaboutapps.at/articles/advanced-pagination-with-epoxy/</link>
      <pubDate>Thu, 14 Feb 2019 10:30:11 +0100</pubDate>
      
      <guid>https://code.allaboutapps.at/articles/advanced-pagination-with-epoxy/</guid>
      <description>Many developers still avoid using Epoxy. I even hesitated for a long time because of the boilerplate coming a long with epoxy and its models, but after reading this post at the latest, you may consider using epoxy, when paging is needed.
So in this post we gonna build pagination with the jetpack‘s paging library, and epoxy, which has an own controller for paging.
We gonna use reddit as our api, by simply adding .</description>
    </item>
    
    <item>
      <title>Emoji Flags</title>
      <link>https://code.allaboutapps.at/articles/emoji-flags/</link>
      <pubDate>Wed, 23 Jan 2019 10:01:25 +0100</pubDate>
      
      <guid>https://code.allaboutapps.at/articles/emoji-flags/</guid>
      <description>Sometimes there&amp;rsquo;s the need to fly a flag in your project. You probably know the ISO code, more specifically the ISO 3166-1 alpha-2 code, a.k.a two-letter code. For Austria this would be AT. Now when thinking about converting these codes into emoji flags, a lookup table comes to mind. But instead of jumping straight into implementing the table it&amp;rsquo;s time to take a closer look at the Unicode Standard. The clever people that added the flag emojis to the Unicode character set invented a system of specifying the flags that makes an algorithmic conversion without lookup tables quite easy.</description>
    </item>
    
    <item>
      <title>Drawing Smooth 2D Graphs using UIBezierPath</title>
      <link>https://code.allaboutapps.at/articles/smooth-graph-lines/</link>
      <pubDate>Mon, 26 Nov 2018 21:12:27 +0100</pubDate>
      
      <guid>https://code.allaboutapps.at/articles/smooth-graph-lines/</guid>
      <description>We have been working on multiple projects that required drawing 2D line graphs given a set of points. UIKit gives us the versatile UIBezierPath, which allows us to create a straight line graph by appending segments using addLineToPath for each point in our array. Easy, but not really pretty.
There are two different kinds of curves in UIBezierPath: quadratic curves with a single control point (addQuadCurveToPoint) and cubic curves with two control points (addCurveToPoint).</description>
    </item>
    
    <item>
      <title>TimingLogger</title>
      <link>https://code.allaboutapps.at/articles/timing-logger/</link>
      <pubDate>Wed, 03 Oct 2018 16:02:48 +0200</pubDate>
      
      <guid>https://code.allaboutapps.at/articles/timing-logger/</guid>
      <description>TimingLogger Sometimes developers needs to analyze performance of a small friction of code. Maybe a RecyclerView is not scrolling smoothly or a calculation needs too much time, we have to split it up and try to find the line or block that runs inefficently. We all know to get a smooth user experience we only have 16ms for each frame to render. So it is very important to locate and optimize inefficient code.</description>
    </item>
    
    <item>
      <title>Android Template Project</title>
      <link>https://code.allaboutapps.at/articles/android-template-project/</link>
      <pubDate>Tue, 25 Sep 2018 16:01:48 +0200</pubDate>
      
      <guid>https://code.allaboutapps.at/articles/android-template-project/</guid>
      <description>Team Android Project Template As a software development company we are starting new projects every few weeks. With every project we create a jira ticket called Project Setup.
We walked through all our Project Setup Jira tickets and calculated the average hours for this kind of task: In average every android project needs about 3.5 hours for a simple setup. On the other hand the project setup is boring and no developer likes that work.</description>
    </item>
    
    <item>
      <title>Reactive Swift: Access Control for Mutable Properties</title>
      <link>https://code.allaboutapps.at/articles/reactive-swift-properties/</link>
      <pubDate>Tue, 17 Jul 2018 11:50:28 +0200</pubDate>
      
      <guid>https://code.allaboutapps.at/articles/reactive-swift-properties/</guid>
      <description>Swift&amp;rsquo;s access control allows us to define separate access levels for the getter and setter of a property. This is nice if we want to provide read access to a property but should only be able to modify it internally:
private(set) var isLoading = false When using ReactiveSwift (or similarly RxSwift) you usually work with MutableProperty. In order to limit modification of the property&amp;rsquo;s value we can create a private writable MutableProperty and a public read-only Property:</description>
    </item>
    
    <item>
      <title>Reactive Swift: flatMap, flatten and combineLatest</title>
      <link>https://code.allaboutapps.at/articles/reactive-swift-flatmap/</link>
      <pubDate>Tue, 17 Jul 2018 11:50:28 +0200</pubDate>
      
      <guid>https://code.allaboutapps.at/articles/reactive-swift-flatmap/</guid>
      <description>Most of our projects at all about apps are build using a MVVM architecture with ReactiveSwift as our reactive framework of choice. However, all code examples should be easily translatable to RxSwift.
Often, you end up with an array of objects (e.g. View Models) which contain some reactive property that you want to bind to. The array itself is a MutableProperty as well and can change at any time (e.g. after a network request).</description>
    </item>
    
  </channel>
</rss>